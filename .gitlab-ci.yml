stages:
  - lint
  - test
  - build
  - extension_tests
  - deploy

cache:
  paths:
    - node_modules

before_script:
  - test ! -z "$CI_NPM_REGISTRY" && npm config set registry $CI_NPM_REGISTRY || true
  - unset HTTP_PROXY
  - unset ALL_PROXY
  - yarn
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

copyright_lint_test:
  image: $CI_DOCKER_REGISTRY/python-static-code-analysis
  stage: lint
  tags: [ "build", "internet", "amd64" ]
  before_script:
    - echo "Skipping before_script"
  script:
    - cd ci && python copyright_header_checker.py -d ../src ../menuconfig -x ../menuconfig/js/lib ../src/views ../src/views/menuconfig  -e js ts py

typescript_lint_test:
  image: node:slim
  stage: lint
  tags: [ "build", "internet", "amd64" ]
  script:
    - yarn run tslint

node_vulnerabilities_test:
  image: node:slim
  stage: lint
  tags: [ "build", "internet", "amd64" ]
  script:
    - yarn audit --registry=https://registry.npmjs.org
  allow_failure: true

python_lint_test:
  image: $CI_DOCKER_REGISTRY/ubuntu-test-env
  stage: lint
  tags: [ "build", "internet", "amd64" ]
  artifacts:
    when: on_failure
    paths:
      - flake8_output.txt
      - bandit_output.txt
    expire_in: 1 week
  before_script:
    - source /opt/pyenv/activate
    - pyenv global 2.7.15
    - python -m pip install bandit flake8
  script:
    - python -m bandit -r -f txt -o bandit_output.txt .
    - python -m flake8 --config=.flake8 --output-file=flake8_output.txt --tee

build_tar:
  image: node:slim
  stage: build
  tags: [ "build", "internet", "amd64" ]
  artifacts:
    paths:
      - espressif-esp-idf-extension-*.tar.gz
    expire_in: 1 week
  script:
    - PACKAGE_VERSION=$(node -p "require('./package.json').version")
    - cd ..
    - tar -pczf espressif-esp-idf-extension-$PACKAGE_VERSION.tar.gz $CI_PROJECT_NAME --exclude "$CI_PROJECT_NAME/node_modules" --exclude "$CI_PROJECT_NAME/.git"
    - mv espressif-esp-idf-extension-$PACKAGE_VERSION.tar.gz $CI_PROJECT_NAME
    - cd $CI_PROJECT_NAME

build_vsix:
  image: electronuserland/builder:11
  stage: build
  tags: [ "build", "internet", "amd64" ]
  artifacts:
    paths:
      - esp-idf-extension-*.vsix
    expire_in: 1 week
  script:
    - yarn config set script-shell /bin/bash
    - VERSION_STR=${CI_COMMIT_TAG:-g${CI_COMMIT_SHA:0:8}}
    - yarn run compile
    - yarn run webpack
    - yarn run package

deploy_marketplace:
  image: electronuserland/builder:11
  stage: deploy
  tags:
    - deploy
  before_script:
    - echo "Skipping before_script"
  artifacts:
    paths:
      - esp-idf-extension-*.vsix
    untracked: false
    expire_in: 30 days
  script:
    - yarn config set script-shell /bin/bash
    - vsce publish -p ${VS_MARKETPLACE_TOKEN}
  when: manual

deploy_github:
  stage: deploy
  tags:
    - deploy
  before_script:
    - echo "Skipping before_script"
  script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote remove github &>/dev/null || true
    - git remote add github git@github.com:espressif/${VSCODE_ESP_IDF_REPO}.git
    - cd ci && ./push_to_github.sh
  when: manual

tests_extension_units:
  image: $CI_DOCKER_REGISTRY/ubuntu-vscode:1-d2303206
  stage: extension_tests
  tags: [ "build", "internet", "amd64" ]
  artifacts:
    paths:
    - "*.log"
    reports:
      junit:
        - results/*
    when: always
    expire_in: 1 week
  script:
    - Xvfb :99 & sleep 2
    - yarn run test --VERBOSE >> testing.results.log
